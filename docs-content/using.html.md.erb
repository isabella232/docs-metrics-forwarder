---
title: Using Metrics Forwarder for PCF
owner: PCF Autoscaler and Scheduler
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }
    .note.warning:before {
        color: #f99;
    }
</style>

<p class="note warning">
<strong>IMPORTANT: </strong> 
The Metrics Forwarder for Pivotal Cloud Foundry (PCF) tile is currently in beta and is intended for evaluation and test purposes only. Do not use this product in a PCF production environment.
</p>

This topic provides instructions for using Metrics Forwarder for Pivotal Cloud Foundry (PCF). The service enables applications to emit custom metrics into the PCF Firehose.

You can interact with the service through the Cloud Foundry Command Line Interface (cf CLI) tool and an HTTP API (docs link here).

For general information, see [Managing Service Instances with the cf CLI](http://docs.pivotal.io/devguide/services/managing-services.html). 

## <a id="prereqs"></a>Prerequisites

* A PCF installation with [Metrics Forwarder for PCF](https://network.pivotal.io/products/p-metrics-forwarder) installed and listed in the [Marketplace](http://docs.pivotal.io/devguide/services/#instances)
* A [Space Developer](http://docs.pivotal.io/pivotalcf/concepts/roles.html#roles) account

## <a id='create-service'></a>Create and Bind a Service Instance

Every app and service in PCF is scoped to a [space](http://docs.pivotal.io/pivotalcf/concepts/roles.html#spaces). This means that an app can use a service only if an instance of the service exists in the same space.

The Metrics Forwarder for PCF service instance can be bound to more than one app.  The number apps bound to a single service instance doesn't have an effect on the service instance.

### <a id='run-marketplace'></a>Confirm Service Availability

For apps to use a service, the service must be available in the Marketplace. To confirm you have installed Metrics Forwarder for PCF:

1. Run `cf marketplace` from the command line.
1. If the output lists `metrics-forwarder` in the `service` column, Metrics Forwarder for PCF is available. If the service is not available, [install](./installing.html) it.

    <pre class="terminal">
    $ cf marketplace
    Getting services from marketplace in org my-org / space my-space as user<span>@</span>example.com...
    OK
    service             plans      description
    [...]
    metrics-forwarder   unlimited  Custom metrics service
    [...]
    </pre>

### <a id='create'></a>Create a Service Instance

To create an instance of the Metrics Forwarder for PCF service, run `cf create-service metrics-forwarder unlimited SERVICE-INSTANCE-NAME`, replacing `SERVICE-INSTANCE-NAME` with a name of your choice. After you create the service instance, this name appears under `service` in the output of the `cf services` command.

See the following example:

<pre class="terminal">
$ cf create-service metrics-forwarder unlimited my-instance<br>
Creating service my-instance in org my-org / space my-space as user<span>@</span>example.com...
OK<br>
$ cf services<br>
Getting services in org my-org / space my-space as user<span>@</span>example.com...
OK
name          service            plan    bound apps    last operation
my-instance   metrics-forwarder  unlimited             create succeeded
</pre>

You can create only one instance in a space. If you attempt to create more than one instance in a space, you receive an error response.

### <a id="bind"></a>Bind a Service Instance to Your App

For an app to use a service, you must bind it to a service instance. Do this after you push or re-push the app using `cf push`.

To bind an app to a Metrics Forwarder instance, run `cf bind-service APP-NAME SERVICE-INSTANCE-NAME`, replacing `APP-NAME` with the name of the app you want to use the Metrics Forwarder service for and `SERVICE-INSTANCE-NAME` with the name you provided when you ran `cf create-service`.

<pre class="terminal">
$ cf bind-service my-app my-instance<br>
Binding service my-instance to my-app in org my-org / space my-space as user<span>@</span>example.com...
OK
TIP: Use 'cf push' to ensure your env variable changes take effect
</pre>

## <a id="emit-metrics"></a>Emitting Metrics

See the following sections to learn about emitting metrics to Metrics Forwarder for PCF.

### <a id="metric-endpoint"></a>Metrics Forwarder endpoint and credentials

The Metrics Forwarder endpoint and credentials are required to emit metrics and can be found in the environment variables for any bound app.


<pre class="terminal">


$ cf env my-app <br>
Getting env variables for app my-app in  org my-org / space my-space as user<span>@</span>example.com...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "metrics-forwarder": [
   {
    "credentials": {
     "access_key": "d7167586-a048-4d20-43cd-fdfd287404d5",
     "endpoint": "https://metrics-forwarder.example.pcf.domain/v1/metrics"
    },[...]
</pre>


The endpoint variable is used as the URI to POST metrics to.  

The access_key variable is used as the auth token in the Authorization header of the POST request.


## <a id='vcap-services'></a>VCAP_SERVICES

Applications running in Cloud Foundry gain access to the bound service instances via an environment variable credentials hash called `VCAP_SERVICES`. An example hash is show below:

<pre><code>
{
 "VCAP_SERVICES": {
  "metrics-forwarder": [
   {
    "credentials": {
     "access_key": "79b864c8-253d-46a2-6508-d9fe6c0c198e",
     "endpoint": "https://metrics-forwarder.example.com/v1/metrics"
    },
    "label": "metrics-forwarder",
    "name": "test-metrics-forwarder",
    "plan": "unlimited",
    "provider": null,
    "syslog_drain_url": null,
    "tags": [],
    "volume_mounts": []
   }
  ]
 }
}
</code></pre>

You can search for your service by its `name`, given when creating the service instance, or dynamically via the `tags` or `label` properties. The `credentials` property can be used as follows:

* The `credentials` properties `access_key` and `endpoint` provide access to the Metrics Forwarder API.

In common with all services in [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF), the `VCAP_SERVICES` environment variable for an application is only modified when the application is bound to a service instance. Users will need to `cf unbind-service`, `cf bind-service` and `cf restage` their app in this scenario.

### <a id="metrics"></a>Metrics 

```
Gauge

A gauge is a very simple metric type. It is float value. 
```

```
Counter

A counter is a 64-bit integer used to represent incrementing and decrementing counts.
```
The Metrics Forwarder service does not increment or decrement the value of a counter metric.

### <a id="emit-metric"></a>Emit metrics

The Metrics Forwarder API accepts metrics emitted to HTTP POST API.  The 

```
{
    "applications": [
    {
        "id": "97a1b381-d8d6-4bb5-a4bb-48567ea5ca28",
        "instances": [
        {
            "id": "some-instance-id",
            "index": "0",
            "metrics": [
            {
                "name": "a-metric",
                "type": "counter",
                "value": 0,
                "timestamp": 1094817600000,
                "unit": "number",
                "tags": { "a-tag" : "a", "b-tag":"b" }
            }]
        }]
    }]
}
```

If your the service plan associated to your service instance has rate limiting configured (look at the service information) your requests and metrics will be limited.  On each request to the API you will recieve rate limit feedback in the form of HTTP Headers.  The following HTTP Headers are present on each response from the Metrics Forwarder API.


```
x-ratelimit-limit →unlimited
x-ratelimit-metrics-limit →unlimited
x-ratelimit-metrics-remaining →unlimited
x-ratelimit-period →60
x-ratelimit-remaining →unlimited
x-ratelimit-retry-after →0
```


### <a id="certs"></a>SSL Certificates

The Metrics Forwarder endpoint is routed through the GoRouter and uses the SSL certificate configured on the GoRouter.  If this certificate is a self signed certificate all apps and tools configured to emit metrics to the Metrics Forwarder API will need to be configured to trust the self signed certificates.



## <a id="consume-metrics"></a>Consuming Metrics

See the following sections to learn about consuming metrics that have been emitted to Metrics Forwarder for PCF.

### <a id="firehose-creds"></a>Credentials required

Users must be granted specific UAA scopes to read any data from the firehose.  The minimal scope is doppler.firehose .  More information on this configuration is here (link to loggregator doc)

### <a id="consume-firehose"></a>Connecting to the Firehose

Metrics can be read from the firehose using any consumer of the firehose including the cf cli nozzle plugin or other community and 3rd party nozzles.  https://github.com/cloudfoundry/loggregator/blob/develop/docs/community-nozzles.md

All metrics emitted are emitted into Loggregator as Value (dropsonde reference) metrics and tag of "type" to indicate whether the metric is a gauge or counter metric type.

### <a id="consume-firehose"></a>Reading the metrics
All metrics emitted by apps through the Metrics Forwarder for PCF service will have the following attributes:

Job: metrics-forwarder
Tags: [app_guid, ]


