---
title: Using Metrics Forwarder for PCF
owner: PCF Autoscaler and Scheduler
---

This topic provides instructions for using Metrics Forwarder for Pivotal Cloud Foundry (PCF).

You can interact with the service through the Cloud Foundry Command Line Interface (cf CLI) tool and an HTTP API (docs link here). For general information, see [Managing Service Instances with the cf CLI](http://docs.pivotal.io/devguide/services/managing-services.html). 

## <a id="prereqs"></a>Prerequisites

* A PCF deployment with [Metrics Forwarder for PCF](https://network.pivotal.io/products/p-metrics-forwarder) installed and listed in the [Marketplace](http://docs.pivotal.io/devguide/services/#instances)
* A [Space Developer](http://docs.pivotal.io/pivotalcf/concepts/roles.html#roles) account

## <a id='create-service'></a>Create and Bind a Service Instance

Every app and service in PCF is scoped to a [space](http://docs.pivotal.io/pivotalcf/concepts/roles.html#spaces). This means that an app can use a service only if an instance of the service exists in the same space.

The Metrics Forwarder for PCF service instance can be bound to more than one app. The number of apps bound to a single service instance does not affect the service instance.

### <a id='run-marketplace'></a>Confirm Service Availability

For apps to use a service, the service must be available in the Marketplace. To confirm you have installed Metrics Forwarder for PCF:

1. Run `cf marketplace` from the command line.
1. If the output lists `metrics-forwarder` in the `service` column, Metrics Forwarder for PCF is available. If the service is not available, [install](./installing.html) it.

See the following example:

<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org my-org / space my-space as user<span>@</span>example.com...
OK
service             plans      description
[...]
metrics-forwarder   unlimited  Custom metrics service
[...]
</pre>

### <a id='create'></a>Create a Service Instance

To create an instance of the Metrics Forwarder for PCF service, run `cf create-service metrics-forwarder unlimited SERVICE-INSTANCE-NAME`, replacing `SERVICE-INSTANCE-NAME` with a name of your choice. After you create the service instance, this name appears under `service` in the output of the `cf services` command.

See the following example:

<pre class="terminal">
$ cf create-service metrics-forwarder unlimited my-instance<br>
Creating service my-instance in org my-org / space my-space as user<span>@</span>example.com...
OK<br>
$ cf services<br>
Getting services in org my-org / space my-space as user<span>@</span>example.com...
OK
name          service            plan    bound apps    last operation
my-instance   metrics-forwarder  unlimited             create succeeded
</pre>

You can create only one instance in a space. If you attempt to create more than one instance in a space, you receive an error response.

### <a id="bind"></a>Bind a Service Instance to Your App

For an app to use a service, you must bind it to a service instance. Do this after you push or re-push the app using `cf push`.

To bind an app to a Metrics Forwarder instance, run `cf bind-service APP-NAME SERVICE-INSTANCE-NAME`, replacing `APP-NAME` with the name of the app you want to use the Metrics Forwarder service for and `SERVICE-INSTANCE-NAME` with the name you provided when you ran `cf create-service`.

See the following example:

<pre class="terminal">
$ cf bind-service my-app my-instance<br>
Binding service my-instance to my-app in org my-org / space my-space as user<span>@</span>example.com...
OK
TIP: Use 'cf push' to ensure your env variable changes take effect
</pre>

## <a id="emit-metrics"></a>Emitting Metrics

The following sections describe how metrics are emitted to Metrics Forwarder for PCF.

### <a id="metric-endpoint"></a>Metrics Forwarder Endpoint and Credentials

The Metrics Forwarder endpoint and credentials are required to emit metrics. You can find this information in the environment variables of your bound app.

<pre class="terminal">
$ cf env my-app <br>
Getting env variables for app my-app in  org my-org / space my-space as user<span>@</span>example.com...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "metrics-forwarder": [
   {
    "credentials": {
     "access_key": "d7167586-a048-4d20-43cd-fdfd287404d5",
     "endpoint": "https://metrics-forwarder.example.pcf.domain/v1/metrics"
    },[...]
</pre>

`endpoint` is used as the URI for `POST` requests.  

`access_key` is used as the authentication token in the `Authorization` header of the `POST` request.


### <a id='vcap-services'></a>VCAP_SERVICES

Apps running in Cloud Foundry access the bound service instances using the `VCAP_SERVICES` environment variable. See the following example:

<pre><code>
{
 "VCAP_SERVICES": {
  "metrics-forwarder": [
   {
    "credentials": {
     "access_key": "79b864c8-253d-46a2-6508-d9fe6c0c198e",
     "endpoint": "https://metrics-forwarder.example.com/v1/metrics"
    },
    "label": "metrics-forwarder",
    "name": "test-metrics-forwarder",
    "plan": "unlimited",
    "provider": null,
    "syslog_drain_url": null,
    "tags": [],
    "volume_mounts": []
   }
  ]
 }
}
</code></pre>

You can search for your service by its `name`, which is the name you provided when creating the service instance, or dynamically through the `tags` or `label` properties. `access_key` and `endpoint` are used to access the Metrics Forwarder API.

Similar to other PCF services, the `VCAP_SERVICES` environment variable for an app is modified only when the app is bound to a service instance.

### <a id="metrics"></a>Metrics

Gauge

A gauge metric is a float value. 

Counter

A counter metric is a 64-bit integer used to represent incrementing and decrementing counts. The Metrics Forwarder service does not increment or decrement the value of a counter metric.

### <a id="emit-metric"></a>Emit Metrics

Metrics Forwarder accepts metrics emitted to its HTTP API using the `POST` method.

```
{
    "applications": [
    {
        "id": "97a1b381-d8d6-4bb5-a4bb-48567ea5ca28",
        "instances": [
        {
            "id": "some-instance-id",
            "index": "0",
            "metrics": [
            {
                "name": "a-metric",
                "type": "counter",
                "value": 0,
                "timestamp": 1094817600000,
                "unit": "number",
                "tags": { "a-tag" : "a", "b-tag":"b" }
            }]
        }]
    }]
}
```

If the service plan associated with your service instance has rate limiting configured, the number of your requests and metrics is limited. For each request to the Metrics Forwarder API, you receive information about your rate limits in the response of the request. The following HTTP headers are present in every response from the Metrics Forwarder API.

```
x-ratelimit-limit →unlimited
x-ratelimit-metrics-limit →unlimited
x-ratelimit-metrics-remaining →unlimited
x-ratelimit-period →60
x-ratelimit-remaining →unlimited
x-ratelimit-retry-after →0
```

### <a id="certs"></a>SSL Certificates

The Metrics Forwarder endpoint is routed through the GoRouter and uses the SSL certificate configured on the GoRouter. If this certificate is a self-signed certificate, you need to configure all apps and tools emitting metrics to the Metrics Forwarder API to trust the self-signed certificates.

## <a id="consume-metrics"></a>Consuming Metrics

See the following sections to learn about consuming metrics that have been emitted to Metrics Forwarder for PCF.

### <a id="firehose-creds"></a>Credentials

Users must have specific UAA scopes to read any data from the Firehose. The minimal scope is `doppler.firehose`. More information on this configuration is here (link to loggregator doc).

### <a id="consume-firehose"></a>Connecting to the Firehose

Metrics can be read from the Firehose using any consumer of the Firehose including the cf cli nozzle plugin or other community and third-party nozzles. https://github.com/cloudfoundry/loggregator/blob/develop/docs/community-nozzles.md

All metrics emitted are emitted into Loggregator as Value (dropsonde reference) metrics and tag of "type" to indicate whether the metric is a gauge or counter metric type.

### <a id="consume-firehose"></a>Reading Metrics

All metrics emitted by apps through the Metrics Forwarder for PCF service have the following Dropsonde envelope attributes.

```
Dropsonde Envelope Attribute : Metrics Forwarder Metric API data
job: metrics_forwarder
origin: metrics-forwarder
tags: [
        applicationGuidapp_guid: application.id,
        applicationInstance: application.instance.id,
        applicationInstanceIndex: application.instance.index,
        type: application.metrics.type,
        {application.metrics.tags.user-tag-key}: {application.metrics.tags.user-tag-value}

      ]
valueMetric: ValueMetrics{
                name: application.metrics.name
                unit: application.metrics.unit
                value: application.metric.value
                }
```
